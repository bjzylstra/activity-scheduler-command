@using GridShared.Columns
@implements ICustomGridComponent<Camper>
@inject ISchedulerService schedulerService

@if (_activityNames == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <select id="@Id" @bind="CurrentActivityName" class="@SelectionClass">
        @foreach (var activityName in _activityNames)
        {
            <option value="@activityName" class="@GetCapacityClass(activityName)">
                @GetDecoratedActivityName(activityName)
            </option>
        }
    </select>
}

@code {
    public class Initializer
    {
        public CamperScheduleGrid ScheduleGrid { get; set; }
        public int TimeSlot { get; set; }
    }

    private List<string> _activityNames;

    [Parameter]
    public Camper Item { get; set; }

    [Parameter]
    public object Object { get; set; }

    private List<string> _activityPreferences;

    private string Id
    {
        get
        {
            Initializer initializer = Object as Initializer;
            return initializer == null ? ""
                : $"{Item.FullName}-{initializer.TimeSlot}";
        }
    }

    private string _currentActivityName;
    private string CurrentActivityName
    {
        get => _currentActivityName;
        set
        {
            if (value != _currentActivityName)
            {
                string previousActivityName = _currentActivityName;
                _currentActivityName = value;
                Initializer initializer = Object as Initializer;
                if (initializer != null)
                {
                    // Setter cannot be async so fire and forget.
                    Task updateTask = initializer.ScheduleGrid
                        .AssignActivityToCamperBlockAsync(Item.FullName,
                            initializer.TimeSlot,
                            GetUndecoratedActivityName(_currentActivityName));
                }
            }
        }
    }
    private List<ActivityDefinition> _activityDefinitions;
    private int _slotId;

    protected override void OnParametersSet()
    {
        Initializer initializer = Object as Initializer;
        if (initializer != null)
        {
            List<ActivityDefinition> activityDefinitions = schedulerService.GetSchedule(
                initializer.ScheduleGrid.ScheduleId);
            _activityNames = activityDefinitions
                .Where(ad => !ad.Name.Equals(SchedulerService.UnscheduledActivityName))
                .Select(ad => ad.Name)
                .ToList();
            _currentActivityName = Item.ScheduledBlocks
                .First(sb => sb.TimeSlot == initializer.TimeSlot)?
                .ActivityDefinition.Name;
            Dictionary<Camper,List<ActivityDefinition>> camperPreferences =
                schedulerService.GetCamperPreferencesForScheduleId(
                    initializer.ScheduleGrid.ScheduleId);
            if (camperPreferences.TryGetValue(Item, out List<ActivityDefinition> activityPreferences))
            {
                _activityPreferences = activityPreferences.Select(ad => ad.Name)
                    .ToList();
                // Reverse the list so more prefered has a higher index.
                _activityPreferences.Reverse();
            }
            else
            {
                _activityPreferences = new List<string>();
            }
            _activityDefinitions = schedulerService.GetSchedule(initializer.ScheduleGrid.ScheduleId);
            _slotId = initializer.TimeSlot;
        }

        base.OnParametersSet();
    }

    private bool MatchesSelectedCamperActivity(string activityName)
    {
        bool matches = false;
        Initializer initializer = Object as Initializer;
        if (initializer != null &&
            initializer.ScheduleGrid != null &&
            initializer.ScheduleGrid.SelectedCamper != null)
        {
            IActivityBlock selectedCamperActivity = initializer.ScheduleGrid.SelectedCamper
                .ScheduledBlocks.First(b => b.TimeSlot == initializer.TimeSlot);
            if (selectedCamperActivity.ActivityDefinition.Name == activityName)
            {
                matches = true;
            }
        }

        return matches;
    }

    private string SelectionClass
    {
        get
        {
            return MatchesSelectedCamperActivity(GetUndecoratedActivityName(CurrentActivityName))
                ? "selected-camper-activity"
                : String.Empty;
        }
    }

    private string GetUndecoratedActivityName(string decoratedActivityName)
    {
        return decoratedActivityName.Trim('*','<',' ');
    }

    private string GetDecoratedActivityName(string activityName)
    {
        int preferenceIndex = _activityPreferences.FindIndex(p => p.Equals(activityName));
        string decoratedActivityName = preferenceIndex > -1
            ? new string('*', preferenceIndex + 1) + " " + activityName
            : activityName;
        if (MatchesSelectedCamperActivity(activityName))
        {
            decoratedActivityName += " <";
        }
        return decoratedActivityName;
    }

    private string GetCapacityClass(string activityName)
    {
        ActivityDefinition activityDefinition = _activityDefinitions
            .First(ad => ad.Name.Equals(activityName));
        int currentCount = activityDefinition.ScheduledBlocks[_slotId].AssignedCampers.Count;

        return (currentCount > activityDefinition.MaximumCapacity) ? "capacity-over"
            : (currentCount == activityDefinition.MaximumCapacity) ? "capacity-at-maximum"
            : (currentCount > activityDefinition.OptimalCapacity) ? "capacity-warning"
            : (currentCount == activityDefinition.MinimumCapacity) ? "capacity-at-minimum"
            : (currentCount < activityDefinition.MinimumCapacity) ? "capacity-under"
            : string.Empty;
    }
}

@page "/activity-schedules"

@inject ISchedulerService schedulerService
@inject IJSRuntime  JSRuntime

<h3>Activity Schedule Grid</h3>

<p>
    File name: 
    <input @bind="_fileName" />
    <button @onclick="DownloadFile">Export as CSV file</button>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent @ref="_component" T="IActivityBlock" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    private CGrid<IActivityBlock> _grid;
    private Task _task;
    private GridComponent<IActivityBlock> _component;
    private string _fileName;


    [Parameter]
    public string ScheduleId { get; set; }

    public (IActivityBlock activityBlock, Camper camper) DragPayload { get; set; }

    public async Task UpdateGrid()
    {
        if (_component != null)
        {
            await _component.UpdateGrid();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _fileName = "activitySchedule.csv";
        var query = new QueryDictionary<StringValues>();
        if (_component == null)
        {
            IGridClient<IActivityBlock> gridClient = new GridClient<IActivityBlock>(q =>
            schedulerService.GetActivityBlocksGridRows(
                ScheduleId,
                ColumnCollections.ActivityScheduleColumns(this), q), query, false, "activityScheduleGrid",
                ColumnCollections.ActivityScheduleColumns(this))
                .SetStriped(true);
            _grid = gridClient.Grid;
            // Set new items to grid
            _task = gridClient.UpdateGrid();
            await _task;
        }
        else
        {
            // Parameter on an existing grid has changed -
            // tell the underlying component to update
            await _component.UpdateGrid();
        }

    }


    public async void DownloadFile()
    {
        // Blazor native does not currently support downloading a file to the client
        // so use a Javascript function.
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs", _fileName,
            schedulerService.WriteActivityScheduleToCsv());
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs", "camperSchedule.csv",
            schedulerService.WriteCamperScheduleToCsv());
    }
}

@page "/activity-schedules"

@inject ISchedulerService schedulerService
@inject IJSRuntime  JSRuntime
@inject ILocalStorageService localStorage

<h3>Activity Schedule Grid</h3>

<p>
    File name:
    <input @bind="_fileName" />
    <button @onclick="DownloadFile">Export as CSV file</button>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent @ref="_component" T="IActivityBlock" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    /// <summary>
    /// Name of the cookie to record the schedule across pages.
    /// </summary>
    private const string ScheduleIdKey = "scheduleId";

    private CGrid<IActivityBlock> _grid;
    private Task _task;
    private GridComponent<IActivityBlock> _component;
    private string _fileName;

    /// <summary>
    /// Track the schedule ID and update the cookie for persistence
    /// </summary>
    private string _scheduleId;
    public string ScheduleId
    {
        get => _scheduleId;
        set
        {
            if (value != _scheduleId)
            {
                _scheduleId = value;
                // This cannot be async so fire and hope it gets there in time.
                localStorage.SetItemAsync(ScheduleIdKey, value);
            }
        }
    }

    public (IActivityBlock activityBlock, Camper camper) DragPayload { get; set; }

    public async Task UpdateGrid()
    {
        if (_component != null)
        {
            await _component.UpdateGrid();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Schedule set comes from cookie if present.
        ScheduleId = await localStorage.GetItemAsync<string>(ScheduleIdKey);
        _fileName = string.IsNullOrEmpty(ScheduleId)
            ? "activitySchedule.csv"
            : $"{ScheduleId}.csv";
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var query = new QueryDictionary<StringValues>();
        if (_component == null)
        {
            IGridClient<IActivityBlock> gridClient = new GridClient<IActivityBlock>(q =>
            schedulerService.GetActivityBlocksGridRows(
                ScheduleId,
                ColumnCollections.ActivityScheduleColumns(this), q), query, false, "activityScheduleGrid",
                ColumnCollections.ActivityScheduleColumns(this))
                .SetStriped(true);
            _grid = gridClient.Grid;
            // Set new items to grid
            _task = gridClient.UpdateGrid();
            await _task;
        }
        else
        {
            // Parameter on an existing grid has changed -
            // tell the underlying component to update
            await _component.UpdateGrid();
        }

    }


    public async void DownloadFile()
    {
        // Blazor native does not currently support downloading a file to the client
        // so use a Javascript function.
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs", _fileName,
            schedulerService.WriteActivityScheduleToCsv(ScheduleId));
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs", "camperSchedule.csv",
            schedulerService.WriteCamperScheduleToCsv(ScheduleId));
    }
}

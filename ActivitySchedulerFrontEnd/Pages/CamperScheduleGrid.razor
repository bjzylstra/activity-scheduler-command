@page "/camper-schedule"

@inject ISchedulerService schedulerService
@inject IJSRuntime  JSRuntime
@inject ILocalStorageService localStorage

<h3>Camper Schedule - @ScheduleId</h3>

<div class="container">
    <div class="row">
        <div class="col">
            <ScheduleIdSelector @bind-CurrentScheduleId="@ScheduleId" />
        </div>
        <div class="col">
            <button @onclick="DownloadFile">Export as CSV file</button>
        </div>
    </div>
</div>

@if (_task != null && _task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent @ref="_component" T="Camper" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
        /// <summary>
        /// Name of the cookie to record the schedule across pages.
        /// </summary>
    private const string ScheduleIdKey = "scheduleId";

    private CGrid<Camper> _grid;
    private Task _task;
    private GridComponent<Camper> _component;

    /// <summary>
    /// Track the schedule ID and update the cookie for persistence
    /// </summary>
    private string _scheduleId;
    public string ScheduleId
    {
        get => _scheduleId;
        set
        {
            if (value != _scheduleId)
            {
                _scheduleId = value;
                // This cannot be async so fire and hope it gets there in time.
                localStorage.SetItemAsync(ScheduleIdKey, value);
                if (_component != null)
                {
                    Task updateTask = _component.UpdateGrid();
                }
            }
        }
    }

    /// <summary>
    /// If a camper is selected, this is the group they are part of.
    /// </summary>
    private HashSet<Camper> _selectedCamperGroup = null;
    private Camper _selectedCamper = null;
    public HashSet<Camper> SelectedCamperGroup => _selectedCamperGroup;
    public Camper SelectedCamper => _selectedCamper;
    private Camper.CamperEqualityCompare _camperComparer = new Camper.CamperEqualityCompare();

    protected override async Task OnInitializedAsync()
    {
        // Schedule set comes from cookie if present.
        ScheduleId = await localStorage.GetItemAsync<string>(ScheduleIdKey);
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var query = new QueryDictionary<StringValues>();
        if (_component == null)
        {
            IGridClient<Camper> gridClient = new GridClient<Camper>(q =>
            schedulerService.GetCampersGridRows(
                ScheduleId,
                ColumnCollections.CamperScheduleColumns(this, ScheduleId), q), query, false, "activityScheduleGrid",
                ColumnCollections.CamperScheduleColumns(this, ScheduleId))
                .SetRowCssClasses(camper => GetCamperRowClass(camper));
            _grid = gridClient.Grid;
            // Set new items to grid
            _task = gridClient.UpdateGrid();
            await _task;
        }
        else
        {
            // Parameter on an existing grid has changed -
            // tell the underlying component to update
            await _component.UpdateGrid();
        }
    }

    /// <summary>
    /// Highlight the camper row from the selection state
    /// </summary>
    /// <param name="camper">Camper for row to hightlight</param>
    /// <returns>Class for highlighting</returns>
    private string GetCamperRowClass(Camper camper)
    {
        return _camperComparer.Equals(camper, _selectedCamper) ? "selected-camper"
            : _selectedCamperGroup != null && _selectedCamperGroup.Contains(camper)
            ? "selected-group"
            : string.Empty;
    }

    public async Task AssignActivityToCamperBlockAsync(string camperName, int timeSlot,
        string activityDefinitionName)
    {
        schedulerService.MoveCamperToBlock(ScheduleId, camperName, timeSlot,
            activityDefinitionName);
        if (_component != null)
        {
            await _component.UpdateGrid();
        }
    }

    public async void DownloadFile()
    {
        // Blazor native does not currently support downloading a file to the client
        // so use a Javascript function.
        string activityScheduleFile = string.IsNullOrEmpty(ScheduleId)
            ? "activitySchedule.csv"
            : $"{ScheduleId}ActivitySchedule.csv";
        string camperScheduleFile = string.IsNullOrEmpty(ScheduleId)
            ? "camperSchedule.csv"
            : $"{ScheduleId}CamperSchedule.csv";

        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs", activityScheduleFile,
            schedulerService.WriteActivityScheduleToCsv(ScheduleId));
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs", camperScheduleFile,
            schedulerService.WriteCamperScheduleToCsv(ScheduleId));
    }

    public async Task SelectCamper(Camper camper)
    {
        _selectedCamper = camper;
        _selectedCamperGroup = null;
        if (camper != null)
        {
            List<HashSet<Camper>> camperGroups = schedulerService.GetCamperGroupsForScheduleId(ScheduleId);
            if (camperGroups != null)
            {
                foreach (HashSet<Camper> camperGroup in camperGroups)
                {
                    if (camperGroup.Contains(camper))
                    {
                        _selectedCamperGroup = camperGroup;
                        break;
                    }
                }
            }
        }
        // Refresh the grid so all the cells get colored.
        if (_component != null)
        {
            await _component.UpdateGrid();
        }
    }
}

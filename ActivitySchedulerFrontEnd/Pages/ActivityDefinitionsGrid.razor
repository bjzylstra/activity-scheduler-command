@inject IActivityDefinitionService ActivityDefinitionService

<h3>@ActivitySet Activities</h3>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent @ref="_component" T="ActivityDefinition" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    private CGrid<ActivityDefinition> _grid;
    private Task _task;
    private GridComponent<ActivityDefinition> _component;


    [Parameter]
    public string ActivitySet { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var query = new QueryDictionary<StringValues>();
        if (_component == null)
        {
            IGridClient<ActivityDefinition> gridClient = new GridClient<ActivityDefinition>(q => ActivityDefinitionService.GetActivityDefinitionsGridRows(
                ActivitySet,
                ColumnCollections.ActivityDefinitionColumns, q), query, false, "activityDefinitionsGrid",
                ColumnCollections.ActivityDefinitionColumns)
                .Sortable()
                .Filterable()
                .SetStriped(true)
                .WithMultipleFilters()
                .WithGridItemsCount("Number of Activities");
            _grid = gridClient.Grid;
            // Set new items to grid
            _task = gridClient.UpdateGrid();
            await _task;
        }
        else
        {
            // Parameter on an existing grid has changed -
            // tell the underlying component to update
            await _component.UpdateGrid();
        }

    }

}
